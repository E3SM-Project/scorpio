!> @file
!! @brief SCORPIO APIs for writing attributes
!! This file contains the SCORPIO APIs for reading ("get"ting)
!! attributes (metadata) associated with variables
!!

!> @internal
!! @def __PIO_FILE__
!! This macro is used to define the file name in user messages
!!
#define __PIO_FILE__ 'spio_get_att.F90'

MODULE spio_get_att
  USE iso_c_binding
  USE pio_types, ONLY : file_desc_t, io_desc_t, var_desc_t, PIO_MAX_NAME,&
                        pio_int, pio_real, pio_double, pio_char,&
                        PIO_NOERR, PIO_EINTERNAL
  USE pio_kinds, ONLY : i4, i8, r4, r8, PIO_OFFSET_KIND, PIO_OFFSET_F2C_TYPE_KIND
  USE spio_util, ONLY : c2fstring, get_text_var_sz, get_var_dim_sz
  USE spio_err, ONLY  : pio_error, pio_warn
  USE spio_get_att_cint
#ifdef TIMING
  USE perf_mod, ONLY  : t_startf, t_stopf
#endif
  IMPLICIT NONE

  PRIVATE
  PUBLIC :: pio_get_att

!> @defgroup PIO_get_att PIO_get_att
!! @public
!! @brief Read ("Get") a variable attribute
!!
!! @details
!! This API can be used to read attributes associated with variables in a file.
!! The variable attributes supported are scalar and a 1D array of values. These
!! arrays/scalars have the same data across all the MPI processes in the I/O system
!! (where the file was opened/created).
!!
!! This API is a collective call on the I/O system associated with the file
!! 
  INTERFACE pio_get_att
    !! pio_get_att* functions read a scalar (single value/datum) or a 1D array
    !! of values as variable attributes

    !! pio_get_att_fh_vid* versions of the function accepts a file id/handle &
    !! a variable id/handle as arguments
    ! DIMS 0,1
    MODULE PROCEDURE pio_get_att_fh_vid_{DIMS}d_{TYPE}
    !! pio_get_att_file_vid* versions of the function accepts a file desc &
    !! a variable id/handle as arguments
    ! DIMS 0,1
    MODULE PROCEDURE pio_get_att_file_vid_{DIMS}d_{TYPE}
    !! pio_get_att_file_vdesc* versions of the function accepts a file desc &
    !! a variable desc as arguments
    ! DIMS 0,1
    MODULE PROCEDURE pio_get_att_file_vdesc_{DIMS}d_{TYPE}
  END INTERFACE

CONTAINS

! FIXME : The file id in the var_desc_t and in file_desc_t have two different
! types (INTEGER(i4) vs INTEGER(C_INT)). This should be fixed.

! DIMS 0,1
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/Get a string attribute associated with a variable in a file
!!
!! @details
!! @param[in] file The file handle. @copydoc file_desc_t
!! @param[in] varid The id of the variable
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (string or an array of strings) is read into this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_file_vid_{DIMS}d_text (file, varid, attname, attval) RESULT(ierr)
    TYPE(file_desc_t), INTENT(IN) :: file
    INTEGER, INTENT(IN) :: varid
    CHARACTER(LEN=*), INTENT(IN) :: attname
    CHARACTER(LEN=*), INTENT(OUT) :: attval{DIMSTR}

    CHARACTER(LEN=PIO_MAX_NAME) :: log_msg
    CHARACTER(C_CHAR), ALLOCATABLE, TARGET :: cval(:)
    INTEGER :: i, clen, nstrs, cval_sz, ret

#ifdef TIMING
    CALL t_startf("PIO:get_att_file_vid_{DIMS}d_text")
#endif
    ierr = PIO_NOERR
    IF(LEN_TRIM(attname) == 0) THEN
      WRITE(log_msg, *) "Invalid attribute name (empty string) passed to pio_get_att() function,",&
                        " pio_get_att_file_vid_{DIMS}d_text(). varid = ", varid, ", file id = ", file%fh
      ierr = pio_error(file%iosystem, PIO_EINTERNAL, __PIO_FILE__, __LINE__, TRIM(log_msg))
      RETURN
    END IF

    clen = LEN(attval)
#if {DIMS} == 0
    nstrs = 1
#else
    nstrs = SIZE(attval)
#endif
    cval_sz = clen * nstrs

    ! NetCDF only supports character arrays
    ! So read the data into a C character array and convert it to Fortran strings
    ALLOCATE(cval(cval_sz))
    cval = C_NULL_CHAR

    ! The NetCDF varids start from 0 for C and 1 for Fortran, we use
    ! the same convention here
    ret = PIOc_get_att_text(file%fh, INT(varid, C_INT) - 1,&
                              TRIM(attname)//C_NULL_CHAR,&
                              C_LOC(cval))

    ierr = c2fstring(file%iosystem, cval, cval_sz, clen, attval)
    IF(ierr /= PIO_NOERR) THEN
      WRITE(log_msg, *) "Unable to convert C strings to Fortran strings in pio_get_att() function,",&
                        " pio_get_att_file_vid_{DIMS}d_text(). varid = ", varid, ", file id = ", file%fh
      ierr = pio_error(file%iosystem, PIO_EINTERNAL, __PIO_FILE__, __LINE__, TRIM(log_msg))
      RETURN
    END IF

    ierr = INT(ret)

    DEALLOCATE(cval)

#ifdef TIMING
    CALL t_stopf("PIO:get_att_file_vid_{DIMS}d_text")
#endif
  END FUNCTION pio_get_att_file_vid_{DIMS}d_text

! DIMS 0,1
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/get a string attribute (or array of attributes) associated with a variable
!! in a file
!!
!! @details
!! @param[in] fh The file handle/id
!! @param[in] varid The id of the variable
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (string or an array of strings) is read into this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_fh_vid_{DIMS}d_text (fh, varid, attname, attval) RESULT(ierr)
    INTEGER, INTENT(IN) :: fh
    INTEGER, INTENT(IN) :: varid
    CHARACTER(LEN=*), INTENT(IN) :: attname
    CHARACTER(LEN=*), INTENT(OUT) :: attval{DIMSTR}

    TYPE(file_desc_t) :: file
    TYPE(iosystem_desc_t), TARGET :: ios

    ! Initialize a dummy file & iosystem (corresponding to fh)
    ios%iosysid = PIOc_get_iosystem(fh)
    file%fh = INT(fh, C_INT)
    file%iosystem => ios

    ierr = pio_get_att_file_vid_{DIMS}d_text(file, varid, attname, attval)
  END FUNCTION pio_get_att_fh_vid_{DIMS}d_text

! DIMS 0,1
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/get a string attribute (or array of attributes) associated with a variable
!! in a file
!!
!! @details
!! @param[in] file The file handle. @copydoc file_desc_t
!! @param[in] vdesc The handle to the variable. @copydoc var_desc_t
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (string or an array of strings) is read into this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_file_vdesc_{DIMS}d_text (file, vdesc, attname, attval) RESULT(ierr)
    TYPE(file_desc_t), INTENT(IN) :: file
    TYPE(var_desc_t), INTENT(IN) :: vdesc
    CHARACTER(LEN=*), INTENT(IN) :: attname
    CHARACTER(LEN=*), INTENT(OUT) :: attval{DIMSTR}

    ierr = pio_get_att_file_vid_{DIMS}d_text(file, INT(vdesc%varid), attname, attval)

  END FUNCTION pio_get_att_file_vdesc_{DIMS}d_text

! DIMS 0,1
! TYPE int,real,double
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/Get an attribute (or an array of attributes) associated with a variable in a file
!!
!! @details
!! @param[in] file The file handle. @copydoc file_desc_t
!! @param[in] varid The id of the variable
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (a scalar value or an array of values) is read into
!! this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_file_vid_{DIMS}d_{TYPE} (file, varid, attname, attval) RESULT(ierr)
    TYPE(file_desc_t), INTENT(IN) :: file
    INTEGER, INTENT(IN) :: varid
    CHARACTER(LEN=*), INTENT(IN) :: attname
    {VTYPE}, INTENT(OUT), TARGET :: attval{DIMSTR}

    CHARACTER(LEN=PIO_MAX_NAME) :: log_msg
    INTEGER(PIO_OFFSET_KIND) :: attlen
    INTEGER(C_INT) :: ret

#ifdef TIMING
    CALL t_startf("PIO:get_att_file_vid_{DIMS}d_{TYPE}")
#endif
    IF(LEN_TRIM(attname) == 0) THEN
      WRITE(log_msg, *) "Invalid attribute name (empty string) passed to pio_get_att() function,",&
                        " pio_get_att_fh_vid_0d_{TYPE}(). varid = ", varid, ", file id = ", file%fh
      ierr = pio_error(file%iosystem, PIO_EINTERNAL, __PIO_FILE__, __LINE__, TRIM(log_msg))
      RETURN
    END IF

#if {DIMS} == 0
    attlen = 1
#else
    attlen = SIZE(attval)
#endif

    ret = PIOc_get_att_{NCTYPE} (file%fh, INT(varid, C_INT) - 1,&
                                  TRIM(attname) // C_NULL_CHAR,&
                                  C_LOC(attval))
    ierr = INT(ret)
#ifdef TIMING
    CALL t_stopf("PIO:get_att_file_vid_{DIMS}d_{TYPE}")
#endif
  END FUNCTION pio_get_att_file_vid_{DIMS}d_{TYPE}

! DIMS 0,1
! TYPE int,real,double
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/Get an attribute (or an array of attributes) associated with a variable in a file
!!
!! @details
!! @param[in] fh The file handle/id
!! @param[in] varid The id of the variable
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (a scalar value or an array of values) is read into
!! this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_fh_vid_{DIMS}d_{TYPE} (fh, varid, attname, attval) RESULT(ierr)
    INTEGER, INTENT(IN) :: fh
    INTEGER, INTENT(IN) :: varid
    CHARACTER(LEN=*), INTENT(IN) :: attname
    {VTYPE}, INTENT(OUT) :: attval{DIMSTR}

    TYPE(file_desc_t) :: file
    TYPE(iosystem_desc_t), TARGET :: ios

    ! Initialize a dummy file & iosystem (corresponding to fh)
    ios%iosysid = PIOc_get_iosystem(fh)
    file%fh = INT(fh, C_INT)
    file%iosystem => ios

    ierr = pio_get_att_file_vid_{DIMS}d_{TYPE} (file, varid, attname, attval)
  END FUNCTION pio_get_att_fh_vid_{DIMS}d_{TYPE}

! DIMS 0,1
! TYPE int,real,double
!>
!! @public
!! @ingroup PIO_get_att
!! @brief Read/Get an attribute (or an array of attributes) associated with a variable in a file
!!
!! @details
!! @param[in] file The file handle. @copydoc file_desc_t
!! @param[in] vdesc The handle to the variable. @copydoc var_desc_t
!! @param[in] attname  The name of the attribute
!! @param[out] attval  The attribute value (a scalar value or an array of values) is read into
!! this arg
!! @retval ierr @copydoc error_return
!!
  INTEGER FUNCTION pio_get_att_file_vdesc_{DIMS}d_{TYPE} (file, vdesc, attname, attval) RESULT(ierr)
    TYPE(file_desc_t), INTENT(IN) :: file
    TYPE(var_desc_t), INTENT(IN) :: vdesc
    CHARACTER(LEN=*), INTENT(IN) :: attname
    {VTYPE}, INTENT(OUT) :: attval{DIMSTR}

    ierr = pio_get_att_file_vid_{DIMS}d_{TYPE} (file, INT(vdesc%varid), attname, attval)

  END FUNCTION pio_get_att_file_vdesc_{DIMS}d_{TYPE}

END MODULE spio_get_att
