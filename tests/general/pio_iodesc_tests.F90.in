PIO_TF_AUTO_TEST_SUB_BEGIN init_decomp_1d_get_loc_sz
  implicit none
  integer, parameter :: VEC_LOCAL_SZ = 7
  integer, dimension(:), allocatable :: data_types
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: data_type_descs
  type(io_desc_t) :: iodesc
  integer, dimension(VEC_LOCAL_SZ) :: compdof, compdof_rel_disps
  integer, dimension(1) :: dims
  integer :: i, ntypes, lsz

  do i=1,VEC_LOCAL_SZ
    compdof_rel_disps(i) = i
  end do
  dims(1) = VEC_LOCAL_SZ * pio_tf_world_sz_
  compdof = VEC_LOCAL_SZ * pio_tf_world_rank_ + compdof_rel_disps

  call PIO_TF_Get_data_types(data_types, data_type_descs, ntypes)
  do i=1,ntypes
    PIO_TF_LOG(0,*) "Testing type : ", data_type_descs(i)
    call PIO_initdecomp(pio_tf_iosystem_, data_types(i), dims, compdof, iodesc)
    lsz = PIO_get_local_array_size(iodesc)
    PIO_TF_PASSERT(lsz == VEC_LOCAL_SZ, "Checking the local array size")
    call PIO_freedecomp(pio_tf_iosystem_, iodesc)
  end do

  if(allocated(data_types)) then
    deallocate(data_types)
    deallocate(data_type_descs)
  end if
PIO_TF_AUTO_TEST_SUB_END init_decomp_1d_get_loc_sz

! Decomp shifted left "shift" positions, each rank contains VEC_LOCAL_SZ
! elements. The shift is a global "cyclic left shift"
! For VEC_LOCAL_SZ = 3,
! e.g. For shift = 0
! e.g. 1) [1, 2, 3] [4, 5, 6] 
! e.g. 2) [1, 2, 3] [4, 5, 6] [6, 7, 8]
! e.g. For shift = 1
! e.g. 1) [2, 3, 4] [5, 6, 1] 
! e.g. 1) [2, 3, 4] [5, 6, 7] [8, 9, 1]
! e.g. For shift = 3
! e.g. 1) [4, 5, 6] [1, 2, 3]  
! e.g. 1) [4, 5, 6] [7, 8, 9] [1, 2, 3]  
SUBROUTINE get_1d_bc_shift_decomp_info(rank, sz, dims, start, count, nlshift)
  integer, intent(in) :: rank
  integer, intent(in) :: sz
  integer, dimension(1), intent(out) :: dims
  integer, dimension(:), allocatable, intent(out) :: start
  integer, dimension(:), allocatable, intent(out) :: count
  integer, intent(in) :: nlshift

  integer, parameter :: VEC_LOCAL_SZ = 7
  integer :: start_idx, last_idx
  ! Number of regions
  integer :: nregs
  
  dims(1) = VEC_LOCAL_SZ * sz
  start_idx = MOD((VEC_LOCAL_SZ * rank + 1) + nlshift, dims(1))
  last_idx = start_idx + VEC_LOCAL_SZ - 1
  if(last_idx <= dims(1)) then
    nregs = 1
  else
    nregs = 2
  end if
  allocate(start(nregs))
  allocate(count(nregs))
  if(nregs == 1) then
    start(1) = start_idx
    count(1) = VEC_LOCAL_SZ
  else
    ! Two regions
    start(1) = start_idx
    count(1) = dims(1) - start(1) + 1

    start(2) = 1
    count(2) = last_idx - dims(1)
  end if

END SUBROUTINE

! Get a block cyclic decomposition with multiple regions to write
! from a single proc
! # All procs have VEC_LOCAL_SZ elements starting at offset
!   (sz * VEC_LOCAL_SZ) * iregion + VEC_LOCAL_SZ * rank + 1
!   where iregion  is the current region,
!         iregion = 0 => first region
!         iregion = 1 => second region and so on
! e.g. For VEC_LOCAL_SZ = 2, NUM_REGIONS=2
! e.g. 1)    [1,2,7,8] [3,4,9,10] [5,6,11,12]
SUBROUTINE get_1d_bc_mureg_info(rank, sz, dims, start, count)
  integer, parameter :: VEC_LOCAL_SZ = 7
  integer, parameter :: NUM_REGIONS = 3
  integer, intent(in) :: rank
  integer, intent(in) :: sz
  integer, dimension(1), intent(out) :: dims
  integer, dimension(:), allocatable, intent(out) :: start
  integer, dimension(:), allocatable, intent(out) :: count
  integer :: i

  dims(1) = sz * VEC_LOCAL_SZ * NUM_REGIONS
  allocate(start(NUM_REGIONS))
  allocate(count(NUM_REGIONS))

  do i=1,NUM_REGIONS
    count(i) = VEC_LOCAL_SZ
    start(i) = rank * VEC_LOCAL_SZ + (i-1) * (sz * VEC_LOCAL_SZ) + 1
  end do

END SUBROUTINE get_1d_bc_mureg_info

! Get a block cyclic decomposition with multiple regions to write
! from a single proc, the number of regions written out by odd
! and even procs are different (not uniform).
! # All procs write regions of size VEC_LOCAL_SZ elements
! # Odd procs write NUM_REGIONS_ODD and even procs write
!   NUM_REGIONS_EVEN number of regions
! e.g. For VEC_LOCAL_SZ = 2, NUM_REGIONS_ODD=2, NUM_REGIONS_EVEN=1
! e.g. 1)    [1,2] [3,4,9,10] [5,6] [7,8,11,12]
SUBROUTINE get_1d_bc_mnureg_info(rank, sz, dims, start, count)
  integer, parameter :: VEC_LOCAL_SZ = 7
  integer, parameter :: NUM_REGIONS_ODD = 3
  integer, parameter :: NUM_REGIONS_EVEN = 2
  integer, intent(in) :: rank
  integer, intent(in) :: sz
  integer, dimension(1), intent(out) :: dims
  integer, dimension(:), allocatable, intent(out) :: start
  integer, dimension(:), allocatable, intent(out) :: count

  integer :: num_regions, num_odd_procs, num_even_procs
  integer :: num_odd_procs_bfr_rank, num_even_procs_bfr_rank
  integer :: i, gcount
  logical :: is_even

  is_even = .false.
  if(mod(rank, 2) == 0) then
    is_even = .true.
  end if
  num_odd_procs = sz / 2
  num_even_procs = sz - num_odd_procs
  num_odd_procs_bfr_rank = rank/2
  num_even_procs_bfr_rank = (rank+1)/2

  if(is_even) then
    num_regions = NUM_REGIONS_EVEN
  else
    num_regions = NUM_REGIONS_ODD
  end if

  dims(1) = num_odd_procs * VEC_LOCAL_SZ * NUM_REGIONS_ODD +&
            num_even_procs * VEC_LOCAL_SZ * NUM_REGIONS_EVEN

  allocate(start(num_regions))
  allocate(count(num_regions))

  ! The number of values already written out globally
  gcount = 0
  do i=1,num_regions
    count(i) = VEC_LOCAL_SZ
    start(i) = gcount + 1
    if(i <= NUM_REGIONS_ODD) then
      start(i) = start(i) + num_odd_procs_bfr_rank * VEC_LOCAL_SZ
      gcount = gcount + num_odd_procs * VEC_LOCAL_SZ
    endif
    if(i <= NUM_REGIONS_EVEN) then
      start(i) = start(i) + num_even_procs_bfr_rank * VEC_LOCAL_SZ
      gcount = gcount + num_even_procs * VEC_LOCAL_SZ
    endif
  end do

END SUBROUTINE get_1d_bc_mnureg_info

! Write multiple frames of data, even frames with no shift - evenly
! divided across all procs, and odd frames with data evenly divided
! across all procs but with a global cyclic left shift
PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_wr_2d_two_iodescs
  implicit none
  interface
    subroutine get_1d_bc_shift_decomp_info(rank, sz, dims, start, count, nlshift)
      integer, intent(in) :: rank
      integer, intent(in) :: sz
      integer, dimension(1), intent(out) :: dims
      integer, dimension(:), allocatable, intent(out) :: start
      integer, dimension(:), allocatable, intent(out) :: count
      integer, intent(in) :: nlshift
    end subroutine get_1d_bc_shift_decomp_info
  end interface
  integer, parameter :: NDIMS = 2
  integer, parameter :: NFRAMES = 6
  integer, parameter :: NLSHIFT = 3
  integer, parameter :: NOSHIFT = 0
  type(var_desc_t)  :: pio_var
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  character(len=*), parameter :: PIO_VAR_NAME = 'PIO_TF_test_var'
  type(io_desc_t) :: wr_iodesc, rd_iodesc, wr_iodesc_shifted
  integer, dimension(:), allocatable :: compdof
  integer, dimension(:), allocatable :: start, count
  integer :: tot_count
  PIO_TF_FC_DATA_TYPE, dimension(:,:), allocatable :: rbuf, wbuf, exp_val
  PIO_TF_FC_DATA_TYPE, dimension(:,:), allocatable :: wbuf_shifted
  integer, dimension(NDIMS-1) :: dims
  integer, dimension(NDIMS) :: pio_dims
  integer :: i, j, k, nrows, ierr
  integer(kind=pio_offset_kind) :: f
  logical :: is_even_frame
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  ! No left shift - data evenly distributed across all procs
  ! even frames written out with no left shift
  call get_1d_bc_shift_decomp_info(pio_tf_world_rank_, pio_tf_world_sz_,&
        dims, start, count, NOSHIFT)

  tot_count = 0
  do i=1,size(count)
    tot_count = tot_count + count(i)
  end do

  nrows = tot_count

  allocate(wbuf(nrows, NFRAMES))
  allocate(rbuf(nrows, NFRAMES))
  rbuf = 0
  allocate(exp_val(nrows, NFRAMES))
  allocate(compdof(nrows))
  k = 1
  do i=1, size(start)
    do j=0, count(i)-1
      compdof(k) = start(i) + j
      k = k + 1
    end do
  end do

  if(allocated(start)) then
    deallocate(start)
  end if
  if(allocated(count)) then
    deallocate(count)
  end if

  do f=1,NFRAMES
    do i=1,nrows
      wbuf(i,f) = int(compdof(i) + (f-1) * dims(1))
      exp_val(i,f) = wbuf(i,f)
    end do
  end do

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, wr_iodesc)

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, rd_iodesc)
  deallocate(compdof)

  ! Decomp with left shift of NLSHIFT - used to write odd frames
  ! Note: dims is same irrespective of the shift
  call get_1d_bc_shift_decomp_info(pio_tf_world_rank_, pio_tf_world_sz_,&
        dims, start, count, NLSHIFT)

  tot_count = 0
  do i=1,size(count)
    tot_count = tot_count + count(i)
  end do

  nrows = tot_count

  allocate(wbuf_shifted(nrows, NFRAMES))
  allocate(compdof(nrows))

  k = 1
  do i=1, size(start)
    do j=0, count(i)-1
      compdof(k) = start(i) + j
      k = k + 1
    end do
  end do

  if(allocated(start)) then
    deallocate(start)
  end if
  if(allocated(count)) then
    deallocate(count)
  end if

  do f=1,NFRAMES
    do i=1,nrows
      wbuf_shifted(i,f) = int(compdof(i) + (f-1) * dims(1))
    end do
  end do

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof,&
        wr_iodesc_shifted)
  deallocate(compdof)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_decomp_simple_tests.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER) 
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_row', dims(1), pio_dims(1))
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_time', pio_unlimited, pio_dims(2))
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_var(pio_file, PIO_VAR_NAME, PIO_TF_DATA_TYPE, pio_dims, pio_var)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var : " // trim(filename))

    ierr = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename))

    do f=1,NFRAMES
      if(mod(INT(f),2) == 0) then
        is_even_frame = .true.
      else
        is_even_frame = .false.
      end if

      call PIO_setframe(pio_file, pio_var, f)
      ! Write the current frame - even frames have no shift, odd frames are
      ! left shifted by NLSHIFT elements
      if(is_even_frame) then
        call PIO_write_darray(pio_file, pio_var, wr_iodesc, wbuf(:,f), ierr)
      else
        call PIO_write_darray(pio_file, pio_var, wr_iodesc_shifted,&
               wbuf_shifted(:,f), ierr)
      end if
      PIO_TF_CHECK_ERR(ierr, "Failed to write darray : " // trim(filename))
    end do

#ifdef PIO_TEST_CLOSE_OPEN_FOR_SYNC
    call PIO_closefile(pio_file)

    ierr = PIO_openfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_nowrite)
    PIO_TF_CHECK_ERR(ierr, "Could not reopen file " // trim(filename))

    ierr = PIO_inq_varid(pio_file, PIO_VAR_NAME, pio_var)
    PIO_TF_CHECK_ERR(ierr, "Could not inq var :" // trim(filename))
#else
    call PIO_syncfile(pio_file)
#endif

    ! Read data - with no shift
    rbuf = 0
    do f=1,NFRAMES
      call PIO_setframe(pio_file, pio_var, f)
      call PIO_read_darray(pio_file, pio_var, rd_iodesc, rbuf(:,f), ierr)
      PIO_TF_CHECK_ERR(ierr, "Failed to read darray : " // trim(filename))
    end do

    do f=1,NFRAMES
      PIO_TF_CHECK_VAL((rbuf(:,f), exp_val(:,f)), "Got wrong val, frame=", f)
    end do

    call PIO_closefile(pio_file)
    
    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do

  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, rd_iodesc)
  call PIO_freedecomp(pio_tf_iosystem_, wr_iodesc)
  call PIO_freedecomp(pio_tf_iosystem_, wr_iodesc_shifted)
  deallocate(exp_val)
  deallocate(rbuf)
  deallocate(wbuf)
  deallocate(wbuf_shifted)
PIO_TF_AUTO_TEST_SUB_END nc_wr_2d_two_iodescs

! Write two variables with multiple contiguous regions of data
! The regions are uniform (same number of regions) across all
! procs
PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_mureg_wr_rd_1d_bc
  implicit none
  interface
    subroutine get_1d_bc_mureg_info(rank, sz, dims, start, count)
      integer, intent(in) :: rank
      integer, intent(in) :: sz
      integer, dimension(1), intent(out) :: dims
      integer, dimension(:), allocatable, intent(out) :: start
      integer, dimension(:), allocatable, intent(out) :: count
    end subroutine get_1d_bc_mureg_info
  end interface
  type(var_desc_t)  :: pio_var1, pio_var2
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  character(len=*), parameter :: PIO_VAR1_NAME = 'PIO_TF_test_var1_mureg'
  character(len=*), parameter :: PIO_VAR2_NAME = 'PIO_TF_test_var2_mureg'
  type(io_desc_t) :: iodesc_mureg
  integer, dimension(:), allocatable :: compdof
  integer, dimension(:), allocatable :: start, count
  integer :: total_count
  PIO_TF_FC_DATA_TYPE, dimension(:), allocatable :: rbuf_mureg, wbuf_mureg
  integer, dimension(1) :: dims_mureg
  integer :: pio_dim_mureg
  integer :: i, j, idx, ierr
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  call get_1d_bc_mureg_info(pio_tf_world_rank_, pio_tf_world_sz_,&
         dims_mureg, start, count)
  total_count = 0
  do i=1,size(count)
    total_count = total_count + count(i)
  end do
  allocate(wbuf_mureg(total_count))
  allocate(rbuf_mureg(total_count))
  allocate(compdof(total_count))
  do i=1,size(count)
    do j=1,count(i)
      idx = (i-1)*count(i) + j
      compdof(idx) = start(i) + j - 1
      wbuf_mureg(idx) = compdof(idx)
      rbuf_mureg(idx) = compdof(idx)
    end do
  end do
  if(allocated(start)) then
    deallocate(start)
  end if
  if(allocated(count)) then
    deallocate(count)
  end if

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims_mureg, compdof, iodesc_mureg)
  deallocate(compdof)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_decomp_simple_tests.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER)
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_mureg', dims_mureg(1), pio_dim_mureg)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim (mureg) : " // trim(filename))

    ierr = PIO_def_var(pio_file, PIO_VAR1_NAME, PIO_TF_DATA_TYPE, (/pio_dim_mureg/), pio_var1)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var (var1) : " // trim(filename))

    ierr = PIO_def_var(pio_file, PIO_VAR2_NAME, PIO_TF_DATA_TYPE, (/pio_dim_mureg/), pio_var2)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var (var2) : " // trim(filename))

    ierr = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename))

    ! Write the variables out
    call PIO_write_darray(pio_file, pio_var1, iodesc_mureg, wbuf_mureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray (var1) : " // trim(filename))

    call PIO_write_darray(pio_file, pio_var2, iodesc_mureg, wbuf_mureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray (var2) : " // trim(filename))

#ifdef PIO_TEST_CLOSE_OPEN_FOR_SYNC
    call PIO_closefile(pio_file)

    ierr = PIO_openfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_nowrite)
    PIO_TF_CHECK_ERR(ierr, "Could not reopen file " // trim(filename))

    ierr = PIO_inq_varid(pio_file, PIO_VAR1_NAME, pio_var1)
    PIO_TF_CHECK_ERR(ierr, "Could not inq var1 :" // trim(filename))

    ierr = PIO_inq_varid(pio_file, PIO_VAR2_NAME, pio_var2)
    PIO_TF_CHECK_ERR(ierr, "Could not inq var2 :" // trim(filename))
#else
    call PIO_syncfile(pio_file)
#endif

    rbuf_mureg = 0
    call PIO_read_darray(pio_file, pio_var1, iodesc_mureg, rbuf_mureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to read darray (var1): " // trim(filename))

    PIO_TF_CHECK_VAL((rbuf_mureg, wbuf_mureg), "Got wrong val (var1)")

    rbuf_mureg = 0
    call PIO_read_darray(pio_file, pio_var2, iodesc_mureg, rbuf_mureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to read darray (var2): " // trim(filename))

    PIO_TF_CHECK_VAL((rbuf_mureg, wbuf_mureg), "Got wrong val (var2)")

    call PIO_closefile(pio_file)

    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do

  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, iodesc_mureg)
  deallocate(rbuf_mureg)
  deallocate(wbuf_mureg)
PIO_TF_AUTO_TEST_SUB_END nc_mureg_wr_rd_1d_bc

! Write two variables with multiple contiguous regions of data
! The regions are non-uniform (Odd and even procs write out different
! number of regions)
PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_mnureg_wr_rd_1d_bc
  implicit none
  interface
    subroutine get_1d_bc_mnureg_info(rank, sz, dims, start, count)
      integer, intent(in) :: rank
      integer, intent(in) :: sz
      integer, dimension(1), intent(out) :: dims
      integer, dimension(:), allocatable, intent(out) :: start
      integer, dimension(:), allocatable, intent(out) :: count
    end subroutine get_1d_bc_mnureg_info
  end interface
  type(var_desc_t)  :: pio_var1, pio_var2
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  character(len=*), parameter :: PIO_VAR1_NAME = 'PIO_TF_test_var1_mnureg'
  character(len=*), parameter :: PIO_VAR2_NAME = 'PIO_TF_test_var2_mnureg'
  type(io_desc_t) :: iodesc_mnureg
  integer, dimension(:), allocatable :: compdof
  integer, dimension(:), allocatable :: start, count
  integer :: total_count
  PIO_TF_FC_DATA_TYPE, dimension(:), allocatable :: rbuf_mnureg, wbuf_mnureg
  integer, dimension(1) :: dims_mnureg
  integer :: pio_dim_mnureg
  integer :: i, j, idx, ierr
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  call get_1d_bc_mnureg_info(pio_tf_world_rank_, pio_tf_world_sz_,&
         dims_mnureg, start, count)
  total_count = 0
  do i=1,size(count)
    total_count = total_count + count(i)
  end do
  allocate(wbuf_mnureg(total_count))
  allocate(rbuf_mnureg(total_count))
  allocate(compdof(total_count))
  do i=1,size(count)
    do j=1,count(i)
      idx = (i-1)*count(i) + j
      compdof(idx) = start(i) + j - 1
      wbuf_mnureg(idx) = compdof(idx)
      rbuf_mnureg(idx) = compdof(idx)
    end do
  end do
  if(allocated(start)) then
    deallocate(start)
  end if
  if(allocated(count)) then
    deallocate(count)
  end if

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims_mnureg, compdof, iodesc_mnureg)
  deallocate(compdof)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_decomp_simple_tests.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER)
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_mnureg', dims_mnureg(1), pio_dim_mnureg)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim (mnureg) : " // trim(filename))

    ierr = PIO_def_var(pio_file, PIO_VAR1_NAME, PIO_TF_DATA_TYPE, (/pio_dim_mnureg/), pio_var1)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var (var1) : " // trim(filename))

    ierr = PIO_def_var(pio_file, PIO_VAR2_NAME, PIO_TF_DATA_TYPE, (/pio_dim_mnureg/), pio_var2)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var (var2) : " // trim(filename))

    ierr = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename))

    ! Write the variables out
    call PIO_write_darray(pio_file, pio_var1, iodesc_mnureg, wbuf_mnureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray (var1) : " // trim(filename))

    call PIO_write_darray(pio_file, pio_var2, iodesc_mnureg, wbuf_mnureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray (var2) : " // trim(filename))

#ifdef PIO_TEST_CLOSE_OPEN_FOR_SYNC
    call PIO_closefile(pio_file)

    ierr = PIO_openfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_nowrite)
    PIO_TF_CHECK_ERR(ierr, "Could not reopen file " // trim(filename))

    ierr = PIO_inq_varid(pio_file, PIO_VAR1_NAME, pio_var1)
    PIO_TF_CHECK_ERR(ierr, "Could not inq var1 :" // trim(filename))

    ierr = PIO_inq_varid(pio_file, PIO_VAR2_NAME, pio_var2)
    PIO_TF_CHECK_ERR(ierr, "Could not inq var2 :" // trim(filename))
#else
    call PIO_syncfile(pio_file)
#endif

    rbuf_mnureg = 0
    call PIO_read_darray(pio_file, pio_var1, iodesc_mnureg, rbuf_mnureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to read darray (var1): " // trim(filename))

    PIO_TF_CHECK_VAL((rbuf_mnureg, wbuf_mnureg), "Got wrong val (var1)")

    rbuf_mnureg = 0
    call PIO_read_darray(pio_file, pio_var2, iodesc_mnureg, rbuf_mnureg, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to read darray (var2): " // trim(filename))

    PIO_TF_CHECK_VAL((rbuf_mnureg, wbuf_mnureg), "Got wrong val (var2)")

    call PIO_closefile(pio_file)

    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do

  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, iodesc_mnureg)
  deallocate(rbuf_mnureg)
  deallocate(wbuf_mnureg)
PIO_TF_AUTO_TEST_SUB_END nc_mnureg_wr_rd_1d_bc
