! Split comm world into n disjoint comms
! The processes are divided evenly across the n comms
! gcomm_idx is a global index (among the comms) of the new_comm
! Note: The function assumes that there are atleast ncomms
! procs
SUBROUTINE split_world_ncomms(ncomms, new_comm, new_rank, new_size, gcomm_idx)
  use pio_tutil
#ifndef NO_MPIMOD
  use mpi
  implicit none
#else
  implicit none
  include 'mpif.h'
#endif
  integer, intent(inout) :: ncomms
  integer, intent(inout) :: new_comm
  integer, intent(inout) :: new_rank
  integer, intent(inout) :: new_size
  integer, intent(inout) :: gcomm_idx

  integer :: nprocs_per_comm
  logical :: is_last_comm
  integer :: ierr
  integer :: color

  new_comm = MPI_COMM_NULL
  new_rank = 0
  new_size = 0
  gcomm_idx = 0

  ! We need at least one proc in each disjoint comm
  if(pio_tf_world_sz_ < ncomms) then
    return
  end if

  nprocs_per_comm = pio_tf_world_sz_/ncomms
  is_last_comm = .false.
  if(pio_tf_world_rank_ >= nprocs_per_comm * (ncomms - 1)) then
    is_last_comm = .true.
  end if

  color = pio_tf_world_rank_/nprocs_per_comm
  ! Make sure that every proc in the last set (all remaining procs
  ! are included in the last set/comm) gets the same color
  if(is_last_comm) then
    color = ncomms - 1
  end if
  gcomm_idx = color + 1

  call MPI_Comm_split(pio_tf_comm_, color, 0, new_comm, ierr)

  call MPI_Comm_size(new_comm, new_size, ierr)
  call MPI_Comm_rank(new_comm, new_rank, ierr)
END SUBROUTINE split_world_ncomms

! Async I/O as service test with 2 compute comms and 1 io comm
! The test creates 1d decomps for each of the compute procs
PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN async_2comp_iodesc_1d
#ifndef NO_MPIMOD
  use mpi
  implicit none
#else
  implicit none
  include 'mpif.h'
#endif
  ! Number of compute components
  integer, parameter :: NUM_COMPONENTS = 2
  ! Total number of comms = comms for each of NUM_COMPONENTS + io comm
  integer :: ncomms = NUM_COMPONENTS + 1
  ! We need to have at least one proc in each of comm
  integer, parameter :: MIN_NUM_PROCS = NUM_COMPONENTS + 1
  integer :: comp_comms(NUM_COMPONENTS)
  type(iosystem_desc_t) :: iosys(NUM_COMPONENTS)
  integer :: new_comm, io_comm
  integer :: new_rank, new_size, i, j
  ! gcomm_idx => Global index for the MPI comms
  ! gcomp_idx => Global index for the compute components
  integer :: gcomm_idx, gcomp_idx
  ! is_io == .true. if proc is part of the io comp
  logical :: is_io = .false.
  integer, parameter :: NUM_REARRANGERS = 2
  integer :: rearrs(NUM_REARRANGERS) = (/pio_rearr_subset,pio_rearr_box/)
  character(len=PIO_TF_MAX_STR_LEN) :: rearrs_info(NUM_REARRANGERS) = (/"PIO_REARR_SUBSET","PIO_REARR_BOX   "/)

  integer, parameter :: VEC_LOCAL_SZ = 7
  integer, parameter :: NUM_DIMS = 1
  integer :: dims(NUM_DIMS)
  type(io_desc_t) :: iodesc
  integer, dimension(VEC_LOCAL_SZ) :: compdof, compdof_rel_disps

  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes = 0

  integer :: ret = PIO_NOERR

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)

  do i=1,VEC_LOCAL_SZ
    compdof_rel_disps(i) = i
  end do

  do i=1,NUM_REARRANGERS
    PIO_TF_LOG(0,*) "Testing rearr : ", trim(rearrs_info(i))
    if(pio_tf_world_sz_ >= MIN_NUM_PROCS) then
      ! Create three disjoint sets of IO procs and compute procs
      call split_world_ncomms(ncomms, new_comm, new_rank, new_size, gcomm_idx)
      !print *, "Split new comm, size = ", new_size, ", rank = ", new_rank, ", gcomm_idx = ", gcomm_idx 

      do j=1,NUM_COMPONENTS
        comp_comms(j) = MPI_COMM_NULL
      end do

      ! Use first comm as the IO proc
      is_io = .false.
      if(gcomm_idx == 1) then
        is_io = .true.
      end if
      gcomp_idx = gcomm_idx - 1

      if(is_io) then
        ! I/O proc
        io_comm = new_comm
        call PIO_init(NUM_COMPONENTS, pio_tf_comm_, comp_comms, io_comm,&
              iosys, rearrs(i))
      else
        ! Compute proc
        comp_comms(gcomp_idx) = new_comm
        io_comm = MPI_COMM_NULL
        call PIO_init(NUM_COMPONENTS, pio_tf_comm_, comp_comms, io_comm,&
              iosys, rearrs(i))

        ! Only compute procs send data 
        dims(1) = VEC_LOCAL_SZ * new_size
        compdof = VEC_LOCAL_SZ * new_rank + compdof_rel_disps

        ! Only compute procs call PIO function calls, I/O proc
        ! waits inside PIO_init() waiting for commands from the
        ! compute processes
        call PIO_initdecomp(iosys(gcomp_idx), PIO_TF_DATA_TYPE, dims, compdof, iodesc)
        !print *, "iosys idx = ", gcomp_idx, " = ", iosys(gcomp_idx)
        call PIO_freedecomp(iosys(gcomp_idx), iodesc)

        do j=1,NUM_COMPONENTS
          call PIO_finalize(iosys(j), ret)
        end do
      end if
      call MPI_Comm_free(new_comm, ret)
      PIO_TF_CHECK_ERR(ret, "PIO_init()/Finalize() failed")
    end if
  end do
PIO_TF_AUTO_TEST_SUB_END async_2comp_iodesc_1d

